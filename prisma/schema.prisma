// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// ! PREDEFINED SCHEMA

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // ! SCHEMA DEFINITIONS
    role            ROLE            @default(USER)
    fullName        String          @default("NEW USER")
    timeInDetails   TimeInDetails[]
    currentTimeInId String?
    Survey          Survey[]

    // bonus sheet
    videoEditorsBonus      VideoEditorsBonus[]
    funnelBuildersBonus    FunnelBuildersBonus[]
    customerServiceBonus   CustomerServiceBonus[]
    facebookMarketingBonus FacebookMarketingBonus[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ! SCHEMA DEFINITIONS
model TimeInDetails {
    id      String    @id @default(cuid())
    timeIn  DateTime? @default(now())
    timeOut DateTime?

    timeInDescription  String // @db.VarChar(40)
    timeOutDescription String @default("Initial Time Out Description") // @db.VarChar(40)

    // REFERENCE
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model Survey {
    id   String   @id @default(cuid())
    date DateTime @default(now())

    feelBetter YES_NO_SAME
    stillHappy YES_NO_SAME
    listenedTo YES_NO
    motivated  MOTIVATED
    comments   String
    month      Int
    year       Int

    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([userId, month, year])
}

model FunnelBuildersBonus {
    id   String   @id @default(cuid())
    date DateTime @default(now())

    // How many hours did you work    
    // How many funnels did you create from scratch?
    // How many funnels did you copy using trick? (fill in 0 if you didnt do anything)
    // How many advertorials did you create from scratch? (fill in 0 if you didnt do anything)
    // How many hours did you work as a customer service employee
    // How many tickets did you resolve in Freshdesk
    // How many disputes did you answered
    dateOfWork             DateTime
    hoursWorked            Float
    funnelsCreated         Int
    copyFunnelTrick        Int
    advertorialFromScratch Int
    hoursAsCustomerService Float
    ticketResolved         Int
    disputesAnswered       Int

    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([userId, dateOfWork])
}

model VideoEditorsBonus {
    id   String   @id @default(cuid())
    date DateTime @default(now())

    // How many hours did you work?
    // How many ads did you make with the competitors ad as a basis? (If you did 1 product, you made 12 ads) ((fill in 0 if you didnt do anything))
    // How many new scrollstoppers did you create for an existing ad? ((fill in 0 if you didnt do anything))
    // How many image ads did you create? (fill in 0 if you didnt do anything)
    // How many VSL's did you make? ((fill in 0 if you didnt do anything))
    dateOfWork         DateTime
    hoursWorked        Float
    competitorAdsBasis Int
    newScrollstoppers  Int
    imageAds           Int
    vsl                Int

    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    productivity Float?

    @@unique([userId, dateOfWork])
}

model CustomerServiceBonus {
    id   String   @id @default(cuid())
    date DateTime @default(now())

    // How many hours did you work as a customer service employee?
    // How many tickets did you resolve? (You can find this in Freshdesk) (100 tickets = 1, 95 tickets equals 0,95 etc.)
    // How many disputes did you resolve?
    dateOfWork       DateTime
    hoursWorked      Float
    ticketsResolved  Int
    disputesResolved Int

    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([userId, dateOfWork])
}

model FacebookMarketingBonus {
    id   String   @id @default(cuid())
    date DateTime @default(now())

    // How many hours did the campaigns launching take? ( 3 hours and 30 minutes = 3.5, 3 hours and 20 minutes = 3.33 etc etc)
    // How many campaigns did you launch
    dateOfWork             DateTime
    hoursCampaignsLaunched Float
    campaignsLaunched      Int

    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([userId, dateOfWork])
}

enum ROLE {
    USER
    CEO
    VIDEO_EDITOR
    CUSTOMER_SERVICE
    FUNNEL_BUILDER
    STRIPE_MANAGER
    PROOFREADER
    EMAIL_MARKETING
    FACEBOOK_MARKETING
}

enum YES_NO_SAME {
    YES
    NO
    SAME
}

enum YES_NO {
    YES
    NO
}

enum MOTIVATED {
    MORE
    SAME
    LESS
}
