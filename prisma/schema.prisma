// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// ! PREDEFINED SCHEMA

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Post          Post[]
    timeInDetails TimeInDetails[]

    // ! SCHEMA DEFINITIONS
    role     ROLE   @default(USER)
    fullName String @default("NEW USER")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ! SCHEMA DEFINITIONS
model TimeInDetails {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    date      DateTime? @db.Date
    day       String?
    timeIn    DateTime? @db.Time()
    timeOut   DateTime? @db.Time()

    timeInDescription  String // @db.VarChar(40)
    timeOutDescription String // @db.VarChar(40)

    // REFERENCE
    User   User?   @relation(fields: [userId], references: [id])
    userId String?
}

enum ROLE {
    USER
    // CEO
    VIDEO_EDITOR
    CUSTOMER_SERVICE
    FUNNEL_BUILDER
    STRIPE_MANAGER
    PROOFREADER
    EMAIL_MARKETING
    FACEBOOK_MARKETING
}
